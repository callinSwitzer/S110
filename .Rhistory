#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
histNormKern(diffs)
histNormKern(data.frame(diffs))
require(ggplot)
require(ggplot2)
histNormKern(data.frame(diffs))
diffs = rexp(100, 10)
histNormKern(data.frame(diffs))
diffs = rexp(100, 10)
histNormKern(data.frame(diffs))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
diffs = c(rexp(100, 10), rep(0, 50))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
print("Mean:", mean(diffs))
mean(diffs)
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", mode(diffs)))
mode(diffs)
print(paste("Mode:", Mode(diffs)))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
print(paste("Mode:", Mode(diffs)))
diffs = c(rexp(100, 10), rep(0, 20))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
diffs <- diffs[diffs != 0 , ]
diffs <- diffs[diffs != 0 ]
histNormKern(diffs) + xlab("Rainfall on rainy days")
histNormKern(data.frame(diffs))+ xlab("Rainfall on rainy days")
mmm(diffs)
rb <- rbeta(1000, shape1 = 3, shape2 = 1)
mean(rb)
Mode(rb)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(rb)
histNormKern(data.frame(rb))
require(ggplot2)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
histNormKern(data.frame(rb))
require(ggplot2)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
diffs = c(rexp(100, 10), rep(0, 20))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
```
If we limit our sample to rainy days (see histogram below):
* the mean will be higher than the randomly chosen days, because we're getting rid of a bunch of zeros.
* the median will also be higher than the median of randomly chosen days
* the mode will no longer be zero, because we've removed all the zeros from our sample.  The mode could be quite high, if most rainy days were "monsoon" storms.  The mode could be quite low, if most of the rainy days were just small sprinkles.
```{r}
diffs <- diffs[diffs != 0 ]
histNormKern(data.frame(diffs))+ xlab("Rainfall on rainy days")
mmm(diffs)
```
```{r}
rb <- rbeta(1000, shape1 = 3, shape2 = 1)
Mode(rb)
rb <- rbeta(10000, shape1 = 3, shape2 = 1)
Mode(rb)
mean(rb)
median(rb)
histNormKern(data.frame(rb))
rb <- rbeta(50000, shape1 = 3, shape2 = 1)
Mode(rb)
mean(rb)
median(rb)
histNormKern(data.frame(rb))
re <- rexp(10000, 1)
histNormKern(data.frame(re))
re <- rexp(10000, 2)
histNormKern(data.frame(re))
re <- rexp(10000, 100)
histNormKern(data.frame(re))
diffs = c(rexp(100, 10), rep(0, 200))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
require(ggplot2)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
diffs = c(rexp(100, 10), rep(0, 200))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
diffs <- diffs[diffs != 0 ]
histNormKern(data.frame(diffs))+ xlab("Rainfall on rainy days")
mmm(diffs)
rb <- rbeta(50000, shape1 = 3, shape2 = 1)
Mode(rb)
mean(rb)
median(rb)
histNormKern(data.frame(rb))
re <- rexp(10000, 100)
histNormKern(data.frame(re))
```{r, echo = F, message = F, fig.height = 2.5}
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs), "Median:", median(diffs), "Mode:", Mode(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
pt(5.16, df = 74)
qt(5.16, df = 74)
X <- runif(1)
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
X <- runif(1)
X
uni <- function(o){
X <- runif(1)
Y <- runif(1)
W <- X-Y
}
uni()
uni <- function(o){
X <- runif(1)
Y <- runif(1)
X-Y
}
uni()
foo <- replicate(10000, uni())
hist(foo)
childPar <- function(nchild = 6, npar = 2){
parents <- rnorm(npar)
children <- rnorm(nchild)
sum(children > parents[1] & children > parents[2])
}
foo <- replicate(100000, childPar())
mean(foo)
childPar <- function(nchild = 6, npar = 2){
parents <- rnorm(npar)
children <- rnorm(nchild)
sum(children > parents[1] & children > parents[2])
}
foo <- replicate(100000, childPar())
mean(foo)
foo <- replicate(100000, childPar())
mean(foo)
foo <- replicate(100000, childPar())
mean(foo)
foo <- replicate(100000, childPar())
mean(foo)
sample(0:1, 100)
sample(0:1, 100, replace = T)
sample(c("H", "T"), 100, replace = T)
flips <- sample(c("H", "T"), 100, replace = T)
cat(flips)
paste(flips)
paste(flips, collapse = "")
word <- paste(flips, collapse = "")
?grep
grep(pattern = "HT", x = word)
flips
flPairs <- matrix(0, now = 100, ncol = 2)
flPairs <- matrix(0, nrow = 100, ncol = 2)
flPairs
flPairs[1,]
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:length(flips)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
for(i in 2:(length(flips) -2){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
for(i in 2:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 2:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
paste(flPairs[,1], flPairs[,2])
paste(flPairs[,1], flPairs[,2], sep = "")
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
dat
grep("HT", x = dat)
flips
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
grep("HT", x = dat)
flips
lengths <- grep("HT", x = dat) + 1
lengths
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
flips
ff <- function(o){
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HT", x = dat) + 1
lengths[1]
}
ff()
ff()
ff()
ff()
ff()
ff()
ff()
ff()
ff()
ff()
ff()
mean(replicate(10000, ff()))
mean(replicate(10000, ff()))
mean(replicate(10000, ff()))
mean(replicate(10000, ff()))
mean(replicate(10000, ff()))
fh <- function(o){
flips <- sample(c("H", "T"), 100, replace = T)
word <- paste(flips, collapse = "")
flPairs <- matrix(0, nrow = 100, ncol = 2)
for(i in 1:(length(flips) -2)){
flPairs[i,] <- c(flips[i], flips[i + 1])
}
flPairs
dat <- paste(flPairs[,1], flPairs[,2], sep = "")
lengths <- grep("HH", x = dat) + 1
lengths[1]
}
mean(replicate(10000, fh()))
flips <- sample(c("H", "T"), size = 100, replace = TRUE)
which(x = flips == "H")
min(which(x = flips == "H"))
firstHeads <- funciton(o){
flips <- sample(c("H", "T"), size = 100, replace = TRUE)
min(which(x = flips == "H"))
}
firstHeads <- funciton(o){
flips <- sample(c("H", "T"), size = 100, replace = TRUE)
min(which(x = flips == "H"))
}
mean(replicate(100000, firstHeads))
firstHeads <- function(o){
flips <- sample(c("H", "T"), size = 100, replace = TRUE)
min(which(x = flips == "H"))
}
mean(replicate(100000, firstHeads))
flips <- sample(c("H", "T"), size = 100, replace = TRUE)
min(which(x = flips == "H"))
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
firstHeads()
mean(replicate(100000, firstHeads()))
mu <- rnorm(n = 10000, mean = 100, sd = 15)
hist(mu)
mu1 <- (rnorm(10000, 0, 1) + 100)*5
hist(mu1)
mu1 <- (rnorm(10000, 0, 1)*15 + 100)
hist(mu1)
mu <- rnorm(n = 10000, mean = 100, sd = 15)
hist(mu)
