xlim(1,2) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat, fill = da)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat, fill = da)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6)
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat, fill = da)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
facet_grid(. ~ da)+
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat)) +
geom_histogram(alpha = 0.5, aes(y = ..density.., fill = da),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
facet_grid(. ~ da)+
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat, fill = da)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
#scale_fill_brewer(palette="OrRd")
theoretical <- data.frame( dat = rpareto1(1000000, shape = 4, min = 1))
theoretical$da <-  "Theoretical"
calculated <- data.frame(dat =  (1-runif(1000000))^(-1/4))
calculated$da <- "Calculated"
thcalc <- rbind(theoretical, calculated)
ggplot(thcalc, aes(dat)) +
geom_histogram(alpha = 0.5, aes(y = ..density.., fill = da),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
facet_grid(. ~ da)+
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat, fill = da)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
#scale_fill_brewer(palette="OrRd")
theoretical <- data.frame( dat = rpareto1(1000000, shape = 10, min = 1))
theoretical$da <-  "Theoretical"
calculated <- data.frame(dat =  (1-runif(1000000))^(-1/10))
calculated$da <- "Calculated"
thcalc <- rbind(theoretical, calculated)
ggplot(thcalc, aes(dat)) +
geom_histogram(alpha = 0.5, aes(y = ..density.., fill = da),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
facet_grid(. ~ da)+
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
ggplot(thcalc, aes(dat, fill = da)) +
geom_histogram(alpha = 0.5, aes(y = ..density..),
position = 'identity', binwidth = 0.05, color =
"black") +
xlim(1,2) +
ylim(0, 6) +
labs(x = "Value", title = "Overlapping Histogram") +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank() ,
panel.grid.major = element_blank() ,
panel.grid.minor = element_blank() ,
panel.border = element_blank(),
axis.line = element_line(color = 'black')) +
# Names for the legend
#scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("white", "grey40"))
#scale_fill_brewer(palette="OrRd")
pi
ra <- pi * runif(1000000)^2
hist(ra)
mean(ra)
var(a)
var(ra)
un <- sqrt(ra / pi)
hist(un)
pi * 0.5^2
mean(un)
ra <- pi * runif(1000000)^2
hist(ra)
mean(ra)
var(ra)
median(ra)
po <- rpois(10000, lambda = 1)
hist(po)
po <- rpois(100000, lambda = 1)
hist(po)
mean(po)
median(po)
var(po)
po <- rpois(1000000, lambda = 1)
hist(po)
mean(po)
median(po)
var(po)
po <- rchisq(1000000, df = 2)
hist(po)
mean(po)
median(po)
var(po)
pi/2
ra <- pi * runif(1000000)^2
hist(ra)
mean(ra)
pi/3
var(ra)
hist(sqrt(runif(1000) / pi))
hist(sqrt(runif(10000) / pi))
A <- runif(10000, min = 0, max = pi)
hist (1/2 * 1/(sqrt(pi * A)))
hist (1/2 * 1/(sqrt(pi * A)), breaks = 0.1)
hist (1/2 * 1/(sqrt(pi * A)), breaks = 50)
max(A)
x <- runif(100000)
fx <- 2/pi* asin(sqrt(x))
plot(x, fx, type = "l")
x <- seq(0,1, length.out = 100)
fx <- 2/pi* asin(sqrt(x))
plot(x, fx, type = "l")
x <- seq(0,1, length.out = 1000)
fx <- 2/pi* asin(sqrt(x))
plot(x, fx, type = "l")
foob <- c(5,5,10)
var(foob)
(5-6.6666)^2 + (10 - 6.6666)^2
(5-6.6666)^2*2/3 + (10 - 6.6666)^2*1/3
(5-6.6666)^2*2 + (10 - 6.6666)^2*1
(5-6.6666)^2*2/3 + (10 - 6.6666)^2*1
(5-6.6666)^2*2/3 + (10 - 6.6666)^2*1/3
(5-6.6666)^2*(2/3) + (10 - 6.6666)^2*1/3
((5-6.6666)^2)*(2/3) + ((10 - 6.6666)^2)/3
mean(foob)
(((5-6.6666)^2)*(2) + ((10 - 6.6666)^2))/2
(((5-6.6666)^2)*(2) + ((10 - 6.6666)^2))/3
library(MASSx)
library(MASS)
fractions((((5-6.6666)^2)*(2) + ((10 - 6.6666)^2))/3)
fractions(25 + 100/9 + 50/9)
diffs = rexp(100)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
histNormKern(diffs)
histNormKern(data.frame(diffs))
require(ggplot)
require(ggplot2)
histNormKern(data.frame(diffs))
diffs = rexp(100, 10)
histNormKern(data.frame(diffs))
diffs = rexp(100, 10)
histNormKern(data.frame(diffs))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
diffs = c(rexp(100, 10), rep(0, 50))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
print("Mean:", mean(diffs))
mean(diffs)
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", mode(diffs)))
mode(diffs)
print(paste("Mode:", Mode(diffs)))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
print(paste("Mode:", Mode(diffs)))
diffs = c(rexp(100, 10), rep(0, 20))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
diffs <- diffs[diffs != 0 , ]
diffs <- diffs[diffs != 0 ]
histNormKern(diffs) + xlab("Rainfall on rainy days")
histNormKern(data.frame(diffs))+ xlab("Rainfall on rainy days")
mmm(diffs)
rb <- rbeta(1000, shape1 = 3, shape2 = 1)
mean(rb)
Mode(rb)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(rb)
histNormKern(data.frame(rb))
require(ggplot2)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
histNormKern(data.frame(rb))
require(ggplot2)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
diffs = c(rexp(100, 10), rep(0, 20))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
```
If we limit our sample to rainy days (see histogram below):
* the mean will be higher than the randomly chosen days, because we're getting rid of a bunch of zeros.
* the median will also be higher than the median of randomly chosen days
* the mode will no longer be zero, because we've removed all the zeros from our sample.  The mode could be quite high, if most rainy days were "monsoon" storms.  The mode could be quite low, if most of the rainy days were just small sprinkles.
```{r}
diffs <- diffs[diffs != 0 ]
histNormKern(data.frame(diffs))+ xlab("Rainfall on rainy days")
mmm(diffs)
```
```{r}
rb <- rbeta(1000, shape1 = 3, shape2 = 1)
Mode(rb)
rb <- rbeta(10000, shape1 = 3, shape2 = 1)
Mode(rb)
mean(rb)
median(rb)
histNormKern(data.frame(rb))
rb <- rbeta(50000, shape1 = 3, shape2 = 1)
Mode(rb)
mean(rb)
median(rb)
histNormKern(data.frame(rb))
re <- rexp(10000, 1)
histNormKern(data.frame(re))
re <- rexp(10000, 2)
histNormKern(data.frame(re))
re <- rexp(10000, 100)
histNormKern(data.frame(re))
diffs = c(rexp(100, 10), rep(0, 200))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
require(ggplot2)
histNormKern <- function(diffs = diffs, title = "Distribution"){
colnames(diffs) <- "diffs"
ggplot(diffs, aes(x = diffs)) +
geom_histogram(aes(y = ..density.., fill = "Histogram"), color = "white",
alpha = 0.2)+
# density line
geom_line(aes(y = ..density..,  lty = "Density"), stat = 'density')+
#geom_line(aes(y = ..density..,  lty = "Normal"), stat = 'normal')+
# normal approx
stat_function(aes(lty = "Normal"), fun=dnorm,
args=list(mean=mean(diffs$diffs), sd=sd(diffs$diffs)))+
labs(x = "Value", title = title) +
theme_bw() +
theme(legend.background = element_rect(colour = "black"),
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,axis.line = element_line(color = 'black')) +
# Names for the legend
scale_linetype(name = "Line")+
scale_fill_manual(name = "Histogram", values = c("black"))
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
diffs = c(rexp(100, 10), rep(0, 200))
histNormKern(data.frame(diffs)) + xlab("Rainfall")
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
diffs <- diffs[diffs != 0 ]
histNormKern(data.frame(diffs))+ xlab("Rainfall on rainy days")
mmm(diffs)
rb <- rbeta(50000, shape1 = 3, shape2 = 1)
Mode(rb)
mean(rb)
median(rb)
histNormKern(data.frame(rb))
re <- rexp(10000, 100)
histNormKern(data.frame(re))
```{r, echo = F, message = F, fig.height = 2.5}
mmm <- function(diffs) {
print(paste("Mean:", mean(diffs), "Median:", median(diffs), "Mode:", Mode(diffs)))
print(paste("Median:", median(diffs)))
print(paste("Mode:", Mode(diffs)))
}
mmm(diffs)
pt(5.16, df = 74)
qt(5.16, df = 74)
